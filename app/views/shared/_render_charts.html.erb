<!-- This partial renders the charts for various objects -->
<!-- Series are built by methods available in the views helper -->

<!-- Tab content for Measures -->
      <div class="row">
        <div class="col-md-6">
          <div id="progression"></div>
        </div>
        <div class="col-md-6">
	  <form action="#" method="post" id="MeasureForm">
	  <fieldset id="SetMeasure">
            <legend>Impact from hierarchy</legend>
            <p>Select measure:
              <label><input type="radio" name="measure" value="Percentage" checked="checked" /> Percentage</label>
              <label><input type="radio" name="measure" value="Cost" /> Cost</label>
              <label><input type="radio" name="measure" value="Workload" /> Workload</label>
	    </p>
            <p>
              <label>Selected: <input type="text" name="Selection" value="?" readonly="readonly" /></label>
	    </p>
	  </fieldset>
	  </form>
          <div id="impact"></div>
        </div>
      </div>
      <!-- End of tab content -->
      
      
      <script> // Draws a bar graph in the progression element
      
      // Progression data
          
         var errors = <%= d3_chart_series_for(this_object).map { |measure| {index: measure.idx, count: measure.score}}.to_json.html_safe   %>;
      // Returns an array of hashes
      //       var errors = [{"index":"2017-01-14","count":"5.35"},{"index":"2017-01-15","count":"2.24"},{"index":"2017-01-16","count":"1.55"},{"index":"2017-01-17","count":"5.11"},{"index":"2017-01-18","count":"2.96"},{"index":"2017-01-19","count":"4.62"},{"index":"2017-01-20","count":"6.71"},{"index":"2017-01-21","count":"9.47"},{"index":"2017-01-22","count":"8.15"},{"index":"2017-01-23","count":"9.25"},{"index":"2017-01-24","count":"5.35"}];

      function drawChart(){

      // graph size and position
      var posSize = document.getElementById('progression').getBoundingClientRect();
      var posX = posSize.left;
      var posY = posSize.top;
      var posWidth = posSize.right - posSize.left;
      var margin = 60;
      
      // axis parameters
      var yDomain = 25;
      var yRange = 300;
      var xTics = <%= date_excursion %>;
      var yTics = 5;

         var x = d3.scaleTime()
          .domain([
              new Date(Date.parse('<%=history_date.strftime("%Y-%m-%d")%>')),
              new Date()
              ])
          .range([0, posWidth - margin * 3]);
          
          var y = d3.scaleLinear()
          .domain([0,yDomain])
          .range([0,300]);
      
          var xAxis = d3.axisTop(x)
          .ticks(xTics);
          
          var yAxis = d3.axisRight(y)
          .ticks(yTics);
          
          var graph =  d3.select('#progression')
          .append('svg')
          .attr('width', posWidth - margin)
          .attr('height', 400);
          
          var bars = graph.selectAll('rect')
          .data(errors);
          
          var newBars = bars.enter();
          
          var color = d3.scaleOrdinal(d3.schemeCategory10);
          
    graph.append('g')
        .attr('class', 'x axis')
        .attr("transform", "translate(" + margin + ",80)")
        .call(xAxis);
        
    graph.append('g')
        .attr('class', 'y axis')
        .attr("transform", "translate(" + (posWidth - margin * 2) + ",80)")
        .call(yAxis);
        
    newBars.append('rect')
        .attr("transform", "translate(" + (margin - 20) + ",30)")
        .attr('x',function(d, i) {
          return x(Date.parse(d.index));})
        .attr('y',50)
        .attr('height', function(d,i) {
          return y(d.count);})
        .attr('width', posWidth / 20 )
        .attr('fill', color());
             
    graph.append('g')
         .attr('transform', 'translate(300,40)')
         .append('text')
         .text('Trend for the last days');

    graph.append('g')
         .attr('transform', 'translate(' + (posWidth - margin * 1.3) + ',300)')
         .append('text')
         .text('Incident percentage')         
         .attr("transform", "rotate(-90)" );         
      }
      
      drawChart(); // first drawing
      
      function redrawChart() {
        d3.select('svg').remove();
        drawChart();
      }
      
      // Redraw based on the new size whenever the browser window is resized.
      d3.select(window).on('resize', redrawChart);
         
      </script>

      <script>
	// get list of radio buttons with name 'measure'
	//var measures = document.getElementById("SetMeasure").elements["measure"];
	var measures = document.forms["MeasureForm"].elements["measure"];
	//console.log(measures.length);
	
	// loop through list
	for (var i=0, len=measures.length; i<len; i++) {
		measures[i].onclick = function() {// assign onclick handler function to each
		// put clicked radio button's value in Selection field
		document.getElementById("SetMeasure").elements.Selection.value = this.value;     };
	       }
      </script>
      
      <script>  // Draws a pie chart in the impact element
      
        var errors_impact = <%= d3_errors_chart_series_for(this_object).
        map { |measure| {index: measure.odq_object_id,
            code: measure.odq_object_code,
            name: measure.odq_object_name,
            count: measure.error_count,
            cost: measure.added_value,
            workload: measure.workload,
            url: measure.odq_object_url }}.to_json.html_safe %>;
        
        var pie = d3.pie()
            .value(function(d) { return d.count });

        var slices = pie(errors_impact);
        
        var arc = d3.arc()
           .innerRadius(0)
           .outerRadius(150);

        // helper that returns a color based on an ID
        var color = d3.scaleOrdinal(d3.schemeCategory20);

          var graph =  d3.select('#impact')
          .append('svg')
          .attr('width', 650)
          .attr('height', 400);
          
        var g = graph.append('g')
        .attr('transform', 'translate(200,200)');
        
        g.selectAll('path.slice')
        .data(slices)
          .enter()
              .append('a')
              .attr("xlink:href", function(d) {
                return ( d.data.url);
                })
              .append('path')
              .attr('class', 'slice')
              .attr('d', arc)
              .attr('fill', function(d) {
                return color(d.data.index);
                });
              
        g.append('g')
         .attr('transform', 'translate(200,20)')
         .attr('class', 'legend')
            .selectAll('text')
            .data(slices)
              .enter()
               .append('text')
               .text(function(d) { return 'â€¢ ' + d.data.name; })
               .attr('fill', function(d) { return color(d.data.index); })
               .attr('y', function(d, i) { return 20 * (i + 1); });
               
        graph.append('g')
         .attr('transform', 'translate(120,30)')
         .append('text')
         .text('Impact from hierarchy');

      </script>
