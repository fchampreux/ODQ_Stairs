<!-- This partial renders the charts for various objects -->
<!-- Series are built by methods available in the views helper -->

<!-- Tab content for Measures -->
      <div class="row">
        <div class="col-md-6">
	  <fieldset>
            <legend>Trend for the last days</legend>
	  </fieldset>
        <div id="progression"></div>
        </div>
        <div class="col-md-6">
	  <form action="#" method="post" id="MeasureForm">
	  <fieldset id="SetMeasure">
            <legend>Impact from hierarchy</legend>
            <p>Select measure:
              <label><input type="radio" name="measure" value="count" checked="checked" /> Percentage</label>
              <label><input type="radio" name="measure" value="cost" /> Cost</label>
              <label><input type="radio" name="measure" value="workload" /> Workload</label>
						</p>
			      <div hidden>
							<label>Selected: <input type="text" name="Selection" value="?" readonly="readonly" /></label>
						</div>
	  </fieldset>
	  </form>
          <div id="impact"></div>
        </div>
      </div>
      <!-- End of tab content -->
      
      
    <script> // Draws a bar graph in the progression element
      
      // Progression data : Returns an array of hashes        
      var errors = <%= d3_chart_series_for(this_object).map { |measure| {index: measure.idx, count: measure.score}}.to_json.html_safe   %>;
      //       var errors = [{"index":"2017-01-14","count":"5.35"},{"index":"2017-01-15","count":"2.24"},{"index":"2017-01-16","count":"1.55"},{"index":"2017-01-17","count":"5.11"},{"index":"2017-01-18","count":"2.96"},{"index":"2017-01-19","count":"4.62"},{"index":"2017-01-20","count":"6.71"},{"index":"2017-01-21","count":"9.47"},{"index":"2017-01-22","count":"8.15"},{"index":"2017-01-23","count":"9.25"},{"index":"2017-01-24","count":"5.35"}];

      function drawChart(){

				// graph size and position
				var posSize = document.getElementById('progression').getBoundingClientRect();
				var posX = posSize.left;
				var posY = posSize.top;
				var posWidth = posSize.right - posSize.left;
				var margin = 60;
				
				// axis parameters
				var yDomain = 25;
				var yRange = 300;
				var xTics = <%= date_excursion %>;
				var yTics = 5;

        var x = d3.scaleTime()
          .domain([
              new Date(Date.parse('<%=history_date.strftime("%Y-%m-%d")%>')),
              new Date()
              ])
          .range([0, posWidth - margin * 3]);
          
        var y = d3.scaleLinear()
          .domain([0,yDomain])
          .range([0,300]);
      
        var xAxis = d3.axisTop(x)
          .ticks(xTics);
          
        var yAxis = d3.axisRight(y)
          .ticks(yTics);
          
        var graph =  d3.select('#progression')
          .append('svg')
          .attr('width', posWidth - margin)
          .attr('height', 400);
          
        var bars = graph.selectAll('rect')
          .data(errors);

        var labels = graph.selectAll('text')
          .data(errors);
					    
        var color = d3.scaleOrdinal(d3.schemeCategory10);
          
				graph.append('g')
					.attr('class', 'x axis')
					.attr("transform", "translate(" + margin + ",80)")
					.call(xAxis);
					
				graph.append('g')
					.attr('class', 'y axis')
					.attr("transform", "translate(" + (posWidth - margin * 2) + ",80)")
					.call(yAxis);
					
				bars.enter()
					.append('rect')
					.attr("transform", "translate(" + (margin - 20) + ",30)")
					.attr('x',function(d, i) {
						return x(Date.parse(d.index));})
					.attr('y',50)
					.attr('height', function(d,i) {
						return y(d.count);})
					.attr('width', posWidth / 20 )
					.attr('fill', color());
					
				labels.enter()
					.append('text')
					.attr("transform", "translate(" + (margin) + ",75)")
					.text(function(d) {
						return d.count + '%';})
					.attr("text-anchor", "middle")
					.attr('x',function(d, i) {
						return x(Date.parse(d.index));})
					.attr('y', function(d,i) {
						return y(d.count);})
					.attr("font-family", "sans-serif")
			    .attr("font-size", "11px")
			    .attr("fill", "white");
	
				graph.append('g')
					 .attr('transform', 'translate(' + (posWidth - margin * 1.3) + ',300)')
					 .append('text')
					 .text('Incident percentage')         
					 .attr("transform", "rotate(-90)" );         
      }
      
      drawChart(); // first drawing
      
      function redrawChart() {
        d3.select('svg').remove();
        drawChart();
      }
      
      // Redraw based on the new size whenever the browser window is resized.
      d3.select(window).on('resize', redrawChart);
         
    </script>

    <script> // declare events base on radio button activation
			$('#SetMeasure input[name="measure"]').click(function(){
				$('#SetMeasure input[name="Selection"]')[0].value=this.value;
				change(this.value);
				}
			);
      </script>
      
      <script>  // Draws a pie chart in the impact element
				// Impact data : Returns an array of hashes from children of current object 
        var errors_impact = <%= d3_errors_chart_series_for(this_object).
        map { |measure| {index: measure.odq_object_id,
            code: measure.odq_object_code,
            name: measure.odq_object_name,
            count: measure.error_count,
            cost: measure.added_value,
            workload: measure.workload,
            url: measure.odq_object_url }}.to_json.html_safe %>;
        
        var pie = d3.pie()
            .value(function(d) { return d.count });

        var slices = pie(errors_impact);
        
        var arc = d3.arc()
           .innerRadius(0)
           .outerRadius(150);

        // helper that returns a color based on an ID
        var color = d3.scaleOrdinal(d3.schemeCategory20);

        var graph =  d3.select('#impact')
          .append('svg')
          .attr('width', 650)
          .attr('height', 400);
          
        var g = graph.append('g')
					.attr('transform', 'translate(200,200)');
        
				var path = g.datum(errors_impact).selectAll("path")
									    .data(pie)
										  .enter()
											.append('a')
											.attr("xlink:href", function(d) {
												return ( d.data.url);
												})
											.append("path")
											.attr("fill", function(d, i) { return color(d.data.index); })
											.attr("d", arc)
											.each(function(d) { this._current = d; }); // store the initial angles
																						
				change("count"); // display initial selection
 
        g.append('g')
					.attr('transform', 'translate(200,20)')
					.attr('class', 'legend')
						 .selectAll('text')
						 .data(slices)
							 .enter()
								.append('text')
								.text(function(d) { return 'â€¢ ' + d.data.name; })
								.attr('fill', function(d) { return color(d.data.index); })
								.attr('y', function(d, i) { return 20 * (i + 1); });
								
				function change(maMesure){
					pie.value(function(d) { return d[maMesure]; }); // change the value function
					path = path.data(pie); // compute the new angles
					path.transition().duration(750).attrTween("d", arcTween); // redraw the arcs
				}
				
				// Store the displayed angles in _current.
				// Then, interpolate from _current to the new angles.
				// During the transition, _current is updated in-place by d3.interpolate.
				function arcTween(a) {
					var i = d3.interpolate(this._current, a);
					this._current = i(0);
					return function(t) {
						return arc(i(t));
					};
				}
								
      </script>
